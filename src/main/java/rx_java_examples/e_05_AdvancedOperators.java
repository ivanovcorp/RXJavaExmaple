package rx_java_examples;

import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.log4j.Logger;

import io.reactivex.Flowable;
import io.reactivex.Observable;
import io.reactivex.flowables.GroupedFlowable;
import javafx.util.Pair;

public class e_05_AdvancedOperators implements BaseRXJava {

	private static Logger log = Logger.getLogger(e_05_AdvancedOperators.class);

	public static void main(String[] args) {

		e_05_AdvancedOperators myObject = new e_05_AdvancedOperators();

		// buffer
		Flowable<Long> numbers = Flowable.interval(1, TimeUnit.SECONDS);

		Flowable<List<Long>> delayedNumbersWindow = numbers.buffer(5);

		myObject.subscribeWithLog(delayedNumbersWindow);

		// simple window
		Flowable<Long> numbers2 = Flowable.interval(1, TimeUnit.SECONDS);

		Flowable<Long> delayedNumbersWindow2 = numbers2.window(5)
				.flatMap(window -> window.doOnComplete(() -> log.info("Window completed")));

		myObject.subscribeWithLog(delayedNumbersWindow2);

		// window
		Flowable<Long> numbers3 = Flowable.interval(1, TimeUnit.SECONDS);

		Flowable<Long> delayedNumbersWindow3 = numbers3.window(10, 5, TimeUnit.SECONDS)
				.flatMap(window -> window.doOnComplete(() -> log.info("Window completed")));

		myObject.subscribeWithLog(delayedNumbersWindow);

		/*
		 * groupBy splits the stream into multiple streams with the key generated by the
		 * function passed as parameter to groupBy
		 */
		Flowable<String> colors = Flowable.fromArray("red", "green", "blue", "red", "yellow", "green", "green");

		Flowable<GroupedFlowable<String, String>> groupedColorsStream = colors.groupBy(val -> val); // identity function
		// .groupBy(val -> "length" + val.length());

		Flowable<Pair<String, Long>> colorCountStream = groupedColorsStream.flatMap(groupedColor -> groupedColor.count()
				.map(count -> new Pair<>(groupedColor.getKey(), count)).toFlowable());

		myObject.subscribeWithLog(colorCountStream);

		// buffer with limit
		Observable<String> colors2 = Observable.fromArray("red", "green", "blue", "red", "yellow", "#", "green",
				"green");

		colors2.publish(p -> p.filter(val -> !val.equals("#")).buffer(() -> p.filter(val -> val.equals("#"))))
				.subscribe(list -> {
					String listCommaSeparated = String.join(",", list);

					log.info("List " + listCommaSeparated);
				});
	}

}
